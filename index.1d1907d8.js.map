{"mappings":"A,S,E,C,C,C,E,C,A,M,G,E,E,M,A,G,C,E,E,M,A,E,I,I,E,E,E,A,M,G,E,E,I,C,C,E,C,C,C,E,C,O,C,C,S,E,C,E,O,G,A,a,O,Q,E,W,G,O,S,O,C,CCEA,IASI,EATE,EAAS,SAAS,aAAa,CAAC,UAChC,EAAe,SAAS,aAAa,CAAC,kBACtC,EAAa,SAAS,aAAa,CAAC,gBACpC,EAAc,SAAS,aAAa,CAAC,iBACrC,EAAY,SAAS,aAAa,CAAC,eACnC,EAAY,SAAS,gBAAgB,CAAC,cAExC,EAAQ,EACR,EAAQ,CAAA,EAMR,EAAY,CACd,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACb,CAmBD,SAAS,EAAK,CAAO,EAGnB,OAFA,EAAe,EAEP,EAAQ,GAAG,EACjB,IAhCa,YAiCX,IACA,KAEF,KAnCc,aAoCZ,IACA,KAEF,KAtCa,YAuKf,IACA,IACA,IAjII,KAEF,KAzCW,UA4Kb,IACA,IACA,IAnII,KAEF,SACE,MACJ,CAEA,IAAK,IAAI,EAAM,EAAG,EAxDP,EAwDmB,IAC5B,IAAK,IAAI,EAAM,EAAG,EAzDT,EAyDqB,IACxB,CAAY,CAAC,EAAI,CAAC,EAAI,GAAK,CAAS,CAAC,EAAI,CAAC,EAAI,GAChD,EAAY,EACZ,IACA,KAKF,GACF,EAAW,SAAS,CAAC,MAAM,CAAC,UA2H1B,MAIJ,IAEO,AAcT,WACE,IAAK,I,E,S,C,EACH,GAAI,CAAY,CAAC,EAAE,CAAC,IAAI,CAAC,SAAC,CAAA,CAAM,CAAhC,EAAsC,OAAA,IAAS,CAAY,CAAC,EAAE,CAAC,EAAI,EAAE,AACnE,GAAA,MAAA,CAAO,EAAA,CAAA,CAAI,CAEf,EAJS,EAAI,EAAG,EAnNL,EAmNe,IAA1B,C,I,E,E,G,G,A,W,E,G,O,E,C,A,CAMA,MAAO,CAAA,CACT,OAnJI,EAAY,SAAS,CAAC,MAAM,CAAC,UAC7B,SAAS,mBAAmB,CAAC,UAAW,GAE5C,CAqBA,SAAS,IACP,IAMM,E,EANqB,GAMrB,EAAa,EAAE,CAErB,EAAU,OAAO,CAAC,SAAC,CAAA,CAAK,CAAxB,EACE,EAAI,OAAO,CAAC,SAAC,CAAA,CAAM,CAAnB,EACe,IAAT,GACF,EAAW,IAAI,CAAC,CAAC,EAAU,EAAY,CAE3C,EACF,G,A,S,C,E,G,M,O,C,G,O,C,E,EAEO,CAAU,CAAC,KAAK,KAAK,CAAC,KAAK,MAAM,GAAK,EAAW,MAAM,EAAE,G,A,S,C,C,C,E,I,E,E,E,A,M,E,K,A,a,O,Q,C,C,O,Q,C,E,C,C,a,C,G,A,M,G,I,E,E,C,E,C,E,E,C,E,G,C,I,E,E,I,C,G,C,C,E,A,C,E,E,I,E,E,I,A,I,E,I,C,E,K,E,C,G,E,M,G,G,E,C,G,C,M,E,C,E,C,E,E,C,Q,C,G,C,G,A,M,E,M,E,E,M,E,Q,C,G,E,M,C,C,C,O,E,E,EAhBrC,I,A,S,C,C,C,E,G,G,G,A,U,O,E,O,E,E,G,I,E,O,S,C,Q,C,I,C,G,K,C,E,I,G,W,G,E,W,E,C,E,E,W,C,I,A,E,A,Q,G,A,Q,E,O,M,I,C,G,G,A,c,G,2C,I,C,G,O,E,E,G,E,EAAA,I,A,W,M,A,U,6I,KAApB,EAAoB,CAAA,CAAA,EAAA,CAAX,EAAW,CAA3B,CAAA,EAAA,AAEA,CAAA,CAAS,CAAC,EAAQ,CAAC,EAAQ,CAAG,AAAgB,GAAhB,KAAK,MAAM,GAAW,EAAI,CAC1D,CAgBA,SAAS,IACP,IAAK,IAAI,EAAM,EAAG,EApHP,EAoHmB,IAC5B,IAAK,IAAI,EAAM,EAAG,EArHT,EAqHqB,IAAO,CACnC,IAAM,EAAO,CAAS,CAAC,EAAI,CAAC,QAAQ,CAAC,EAAI,CACnC,EAAO,CAAS,CAAC,EAAI,CAAC,EAAI,AAE5B,AAAS,CAAA,IAAT,GACF,EAAK,WAAW,CAAG,GACnB,EAAK,SAAS,CAAG,eAEjB,EAAK,WAAW,CAAG,EACnB,EAAK,SAAS,CAAG,0BAA+B,MAAA,CAAL,GAE/C,CAGF,EAAU,WAAW,CAAG,CAC1B,CAEA,SAAS,IACF,KAIL,CAAA,EAAe,EAAa,GAAG,CAAC,SAAA,CAAhC,EACE,IAAM,EAAS,EAAI,MAAM,CAAC,SAAA,CAA1B,EAAkC,OAAA,AAAS,IAAT,C,GAclC,OAZA,EAAO,OAAO,CAAC,SAAC,CAAA,CAAM,CAAtB,EACM,IAAS,CAAM,CAAC,EAAQ,EAAE,GAC5B,CAAM,CAAC,EAAM,EAAI,EACjB,EAAO,MAAM,CAAC,EAAQ,EAAG,GACzB,GAAS,CAAM,CAAC,EAAM,CAEA,OAAlB,CAAM,CAAC,EAAM,EACf,CAAA,EAAQ,CAAA,CADV,EAIJ,GAEO,EAAO,MAAM,CAAC,MAAM,AA1JlB,EA0JyB,EAAO,MAAM,EAAE,IAAI,CAAC,GACxD,EAAA,CACF,CAEA,SAAS,IACF,MAIL,IACA,IACA,IACF,CAEA,SAAS,IACP,EAAa,OAAO,CAAC,SAAA,CAArB,EAA4B,OAAA,EAAI,OAAO,E,EACzC,CAcA,SAAS,IACP,EAAe,CAAY,CAAC,EAAE,CAC3B,GAAG,CAAC,SAAC,CAAA,CAAG,CADX,EACwB,OAAA,EAAa,GAAG,CAAC,SAAA,CAAjB,EAAwB,OAAA,CAAG,CAAC,EAAS,A,E,EAC/D,CAYA,SAAS,IACP,IAAK,I,E,S,C,EACH,GAAI,CAAY,CAAC,EAAE,CAAC,IAAI,CAAC,SAAA,CAAzB,EAAiC,OAAA,AAAS,IAAT,CAC5B,IAAA,CAAY,CAAC,EAAE,CAAC,IAAI,CAAC,SAAC,CAAA,CAAM,CAA5B,EAAkC,OAAA,IAAS,CAAY,CAAC,EAAE,CAAC,EAAI,EAAE,AACpE,GAAA,MAAA,CAAO,EAAA,CAAA,CAAI,CAEf,EALS,EAAI,EAAG,EAxML,EAwMe,IAA1B,C,I,E,E,G,G,A,W,E,G,O,E,C,A,CAOA,MAAO,CAAA,CACT,CAjMA,EAAO,gBAAgB,CAAC,QAAS,SAAA,CAAjC,EACE,SAAS,gBAAgB,CAAC,UAAW,GAEjC,EAAO,SAAS,CAAC,QAAQ,CAAC,UAC5B,EAAO,SAAS,CAAC,OAAO,CAAC,QAAS,WAClC,EAAO,SAAS,CAAG,UACnB,EAAa,SAAS,CAAC,GAAG,CAAC,YAE3B,EAAQ,CAAA,EAsDV,EAAQ,EAER,EAAY,CACV,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACb,CAEI,EAAY,SAAS,CAAC,QAAQ,CAAC,WAClC,EAAY,SAAS,CAAC,GAAG,CAAC,UAGvB,EAAW,SAAS,CAAC,QAAQ,CAAC,WACjC,EAAW,SAAS,CAAC,GAAG,CAAC,WAhE3B,IACA,IACA,GACF","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_with_holes(arr) {\n    if (Array.isArray(arr)) return arr;\n}\nfunction _iterable_to_array_limit(arr, i) {\n    var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n    if (_i == null) return;\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _s, _e;\n    try {\n        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){\n            _arr.push(_s.value);\n            if (i && _arr.length === i) break;\n        }\n    } catch (err) {\n        _d = true;\n        _e = err;\n    } finally{\n        try {\n            if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n        } finally{\n            if (_d) throw _e;\n        }\n    }\n    return _arr;\n}\nfunction _non_iterable_rest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _sliced_to_array(arr, i) {\n    return _array_with_holes(arr) || _iterable_to_array_limit(arr, i) || _unsupported_iterable_to_array(arr, i) || _non_iterable_rest();\n}\nfunction _type_of(obj) {\n    \"@swc/helpers - typeof\";\n    return obj && typeof Symbol !== \"undefined\" && obj.constructor === Symbol ? \"symbol\" : typeof obj;\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nvar button = document.querySelector(\"button\");\nvar messageStart = document.querySelector(\".message-start\");\nvar messageWin = document.querySelector(\".message-win\");\nvar messageLose = document.querySelector(\".message-lose\");\nvar gameScore = document.querySelector(\".game-score\");\nvar fieldRows = document.querySelectorAll(\".field-row\");\nvar size = 4;\nvar score = 0;\nvar isWin = false;\nvar newGameField;\nvar RUN_LEFT = \"ArrowLeft\";\nvar RUN_RIGHT = \"ArrowRight\";\nvar RUN_DOWN = \"ArrowDown\";\nvar RUN_UP = \"ArrowUp\";\nvar gameField = [\n    [\n        0,\n        0,\n        0,\n        0\n    ],\n    [\n        0,\n        0,\n        0,\n        0\n    ],\n    [\n        0,\n        0,\n        0,\n        0\n    ],\n    [\n        0,\n        0,\n        0,\n        0\n    ]\n];\nbutton.addEventListener(\"click\", function(e) {\n    document.addEventListener(\"keydown\", move);\n    if (button.classList.contains(\"start\")) {\n        button.classList.replace(\"start\", \"restart\");\n        button.innerText = \"Restart\";\n        messageStart.classList.add(\"hidden\");\n    } else {\n        isWin = false;\n        reset();\n    }\n    addNumber();\n    addNumber();\n    render();\n});\nfunction move(element) {\n    newGameField = gameField;\n    switch(element.key){\n        case RUN_LEFT:\n            goLeft();\n            break;\n        case RUN_RIGHT:\n            goRight();\n            break;\n        case RUN_DOWN:\n            goDown();\n            break;\n        case RUN_UP:\n            goUp();\n            break;\n        default:\n            return;\n    }\n    for(var row = 0; row < size; row++){\n        for(var col = 0; col < size; col++)if (newGameField[row][col] !== gameField[row][col]) {\n            gameField = newGameField;\n            addNumber();\n            render();\n        }\n    }\n    if (isWin) messageWin.classList.remove(\"hidden\");\n    if (!isPosibleToMove()) {\n        messageLose.classList.remove(\"hidden\");\n        document.removeEventListener(\"keydown\", move);\n    }\n}\nfunction reset() {\n    score = 0;\n    gameField = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ];\n    if (!messageLose.classList.contains(\"hidden\")) messageLose.classList.add(\"hidden\");\n    if (!messageWin.classList.contains(\"hidden\")) messageWin.classList.add(\"hidden\");\n}\nfunction addNumber() {\n    var _findEmptyCell = _sliced_to_array(findEmptyCell(), 2), randomY = _findEmptyCell[0], randomX = _findEmptyCell[1];\n    gameField[randomY][randomX] = Math.random() < 0.9 ? 2 : 4;\n}\nfunction findEmptyCell() {\n    var emptyCells = [];\n    gameField.forEach(function(row, rowIndex) {\n        row.forEach(function(cell, columnIndex) {\n            if (cell === 0) emptyCells.push([\n                rowIndex,\n                columnIndex\n            ]);\n        });\n    });\n    return emptyCells[Math.floor(Math.random() * emptyCells.length)];\n}\nfunction render() {\n    for(var row = 0; row < size; row++)for(var col = 0; col < size; col++){\n        var elem = fieldRows[row].children[col];\n        var cell = gameField[row][col];\n        if (cell === 0) {\n            elem.textContent = \"\";\n            elem.className = \"field-cell\";\n        } else {\n            elem.textContent = cell;\n            elem.className = \"field-cell field-cell--\".concat(cell);\n        }\n    }\n    gameScore.textContent = score;\n}\nfunction goLeft() {\n    if (!checkRows()) return;\n    newGameField = newGameField.map(function(row) {\n        var newRow = row.filter(function(cell) {\n            return cell !== 0;\n        });\n        newRow.forEach(function(cell, index) {\n            if (cell === newRow[index + 1]) {\n                newRow[index] *= 2;\n                newRow.splice(index + 1, 1);\n                score += newRow[index];\n                if (newRow[index] === 2048) isWin = true;\n            }\n        });\n        return newRow.concat(Array(size - newRow.length).fill(0));\n    });\n}\nfunction goRight() {\n    if (!checkRows()) return;\n    reverseRows();\n    goLeft();\n    reverseRows();\n}\nfunction reverseRows() {\n    newGameField.forEach(function(row) {\n        return row.reverse();\n    });\n}\nfunction goDown() {\n    transposeGameField();\n    goRight();\n    transposeGameField();\n}\nfunction goUp() {\n    transposeGameField();\n    goLeft();\n    transposeGameField();\n}\nfunction transposeGameField() {\n    newGameField = newGameField[0].map(function(_, colIndex) {\n        return newGameField.map(function(row) {\n            return row[colIndex];\n        });\n    });\n}\nfunction isPosibleToMove() {\n    if (checkRows()) return true;\n    transposeGameField();\n    return checkColumns();\n}\nfunction checkRows() {\n    var _loop = function(i) {\n        if (newGameField[i].some(function(cell) {\n            return cell === 0;\n        }) || newGameField[i].some(function(cell, j) {\n            return cell === newGameField[i][j + 1];\n        })) return {\n            v: true\n        };\n    };\n    for(var i = 0; i < size; i++){\n        var _ret = _loop(i);\n        if (_type_of(_ret) === \"object\") return _ret.v;\n    }\n    return false;\n}\nfunction checkColumns() {\n    var _loop = function(i) {\n        if (newGameField[i].some(function(cell, j) {\n            return cell === newGameField[i][j + 1];\n        })) return {\n            v: true\n        };\n    };\n    for(var i = 0; i < size; i++){\n        var _ret = _loop(i);\n        if (_type_of(_ret) === \"object\") return _ret.v;\n    }\n    return false;\n}\n\n//# sourceMappingURL=index.1d1907d8.js.map\n","'use strict';\n\nconst button = document.querySelector('button');\nconst messageStart = document.querySelector('.message-start');\nconst messageWin = document.querySelector('.message-win');\nconst messageLose = document.querySelector('.message-lose');\nconst gameScore = document.querySelector('.game-score');\nconst fieldRows = document.querySelectorAll('.field-row');\nconst size = 4;\nlet score = 0;\nlet isWin = false;\nlet newGameField;\nconst RUN_LEFT = 'ArrowLeft';\nconst RUN_RIGHT = 'ArrowRight';\nconst RUN_DOWN = 'ArrowDown';\nconst RUN_UP = 'ArrowUp';\nlet gameField = [\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n];\n\nbutton.addEventListener('click', e => {\n  document.addEventListener('keydown', move);\n\n  if (button.classList.contains('start')) {\n    button.classList.replace('start', 'restart');\n    button.innerText = 'Restart';\n    messageStart.classList.add('hidden');\n  } else {\n    isWin = false;\n    reset();\n  }\n\n  addNumber();\n  addNumber();\n  render();\n});\n\nfunction move(element) {\n  newGameField = gameField;\n\n  switch (element.key) {\n    case RUN_LEFT:\n      goLeft();\n      break;\n\n    case RUN_RIGHT:\n      goRight();\n      break;\n\n    case RUN_DOWN:\n      goDown();\n      break;\n\n    case RUN_UP:\n      goUp();\n      break;\n\n    default:\n      return;\n  }\n\n  for (let row = 0; row < size; row++) {\n    for (let col = 0; col < size; col++) {\n      if (newGameField[row][col] !== gameField[row][col]) {\n        gameField = newGameField;\n        addNumber();\n        render();\n      }\n    }\n  }\n\n  if (isWin) {\n    messageWin.classList.remove('hidden');\n  }\n\n  if (!isPosibleToMove()) {\n    messageLose.classList.remove('hidden');\n    document.removeEventListener('keydown', move);\n  }\n}\n\nfunction reset() {\n  score = 0;\n\n  gameField = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n\n  if (!messageLose.classList.contains('hidden')) {\n    messageLose.classList.add('hidden');\n  }\n\n  if (!messageWin.classList.contains('hidden')) {\n    messageWin.classList.add('hidden');\n  }\n};\n\nfunction addNumber() {\n  const [randomY, randomX] = findEmptyCell();\n\n  gameField[randomY][randomX] = Math.random() < 0.9 ? 2 : 4;\n};\n\nfunction findEmptyCell() {\n  const emptyCells = [];\n\n  gameField.forEach((row, rowIndex) => {\n    row.forEach((cell, columnIndex) => {\n      if (cell === 0) {\n        emptyCells.push([rowIndex, columnIndex]);\n      }\n    });\n  });\n\n  return emptyCells[Math.floor(Math.random() * emptyCells.length)];\n}\n\nfunction render() {\n  for (let row = 0; row < size; row++) {\n    for (let col = 0; col < size; col++) {\n      const elem = fieldRows[row].children[col];\n      const cell = gameField[row][col];\n\n      if (cell === 0) {\n        elem.textContent = '';\n        elem.className = 'field-cell';\n      } else {\n        elem.textContent = cell;\n        elem.className = `field-cell field-cell--${cell}`;\n      }\n    };\n  };\n\n  gameScore.textContent = score;\n};\n\nfunction goLeft() {\n  if (!checkRows()) {\n    return;\n  }\n\n  newGameField = newGameField.map(row => {\n    const newRow = row.filter(cell => cell !== 0);\n\n    newRow.forEach((cell, index) => {\n      if (cell === newRow[index + 1]) {\n        newRow[index] *= 2;\n        newRow.splice(index + 1, 1);\n        score += newRow[index];\n\n        if (newRow[index] === 2048) {\n          isWin = true;\n        }\n      }\n    });\n\n    return newRow.concat(Array(size - newRow.length).fill(0));\n  });\n}\n\nfunction goRight() {\n  if (!checkRows()) {\n    return;\n  }\n\n  reverseRows();\n  goLeft();\n  reverseRows();\n}\n\nfunction reverseRows() {\n  newGameField.forEach(row => row.reverse());\n}\n\nfunction goDown() {\n  transposeGameField();\n  goRight();\n  transposeGameField();\n}\n\nfunction goUp() {\n  transposeGameField();\n  goLeft();\n  transposeGameField();\n}\n\nfunction transposeGameField() {\n  newGameField = newGameField[0]\n    .map((_, colIndex) => newGameField.map(row => row[colIndex]));\n}\n\nfunction isPosibleToMove() {\n  if (checkRows()) {\n    return true;\n  }\n\n  transposeGameField();\n\n  return checkColumns();\n}\n\nfunction checkRows() {\n  for (let i = 0; i < size; i++) {\n    if (newGameField[i].some(cell => cell === 0)\n      || newGameField[i].some((cell, j) => cell === newGameField[i][j + 1])) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction checkColumns() {\n  for (let i = 0; i < size; i++) {\n    if (newGameField[i].some((cell, j) => cell === newGameField[i][j + 1])) {\n      return true;\n    }\n  }\n\n  return false;\n}\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","_type_of","obj","Symbol","constructor","newGameField","button","document","querySelector","messageStart","messageWin","messageLose","gameScore","fieldRows","querySelectorAll","score","isWin","gameField","move","element","key","goLeft","goRight","transposeGameField","row","col","addNumber","render","classList","remove","checkRows","checkColumns","_loop","some","cell","j","v","_ret","removeEventListener","emptyCells","_findEmptyCell","forEach","rowIndex","columnIndex","push","_array_with_holes","isArray","Math","floor","random","_iterable_to_array_limit","_s","_e","_i","iterator","_arr","_n","_d","call","next","done","value","err","_unsupported_iterable_to_array","o","minLen","n","Object","prototype","toString","slice","name","from","test","_non_iterable_rest","TypeError","randomY","randomX","elem","children","textContent","className","concat","map","newRow","filter","index","splice","size","fill","reverseRows","reverse","_","colIndex","addEventListener","e","contains","replace","innerText","add"],"version":3,"file":"index.1d1907d8.js.map"}